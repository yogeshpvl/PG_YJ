generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PG {
  id            Int             @id @default(autoincrement())
  name          String
  address       String
  city          String?
  rentDueDay    Int
  ownerId       Int
  owner         User            @relation("OwnerPGs", fields: [ownerId], references: [id])
  floors        Floor[]
  beds          Bed[]
  guests        User[]          @relation("PGGuests")
  expenses      Expense[]
  payments      Payment[]
  pincode       String?
  issues        Issue[]
  menus         Menu[]
  notifications Notification[]
  complaints    Complaint[]
  isActive      Boolean         @default(true) // system-controlled (block if unpaid)
  guestPolicies GuestPolicy[]   @relation("PGGuestPolicies")
  notices       NoticeRequest[] @relation("PGNotices")
  createdAt     DateTime        @default(now())
}

model Floor {
  id    Int    @id @default(autoincrement())
  name  String @unique
  pgId  Int
  pg    PG     @relation(fields: [pgId], references: [id])
  rooms Room[]
}

model Room {
  id        Int      @id @default(autoincrement())
  number    String
  floorId   Int
  sharing   Int       // 2, 3, 4 sharing
  amenities Json?     // Stores ["AC", "TV", "WiFi"]
  floor     Floor     @relation(fields: [floorId], references: [id])
  beds      Bed[]
}


model Bed {
  id         Int       @id @default(autoincrement())
  label      String
  roomId     Int
  pgId       Int
  guestId    Int?
  isOccupied Boolean   @default(false)
  rent       Float
  facilities String?
  room       Room      @relation(fields: [roomId], references: [id])
  pg         PG        @relation(fields: [pgId], references: [id])
  guest      User?     @relation("UserBed", fields: [guestId], references: [id])
  payments   Payment[] @relation("BedPayments") // âœ… FIXED
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  phone         String?
  role          String // "owner" | "guest"
  deviceToken   String?
  pgId          Int?
  pg            PG?             @relation("PGGuests", fields: [pgId], references: [id])
  ownedPGs      PG[]            @relation("OwnerPGs")
  bed           Bed[]           @relation("UserBed")
  payments      Payment[]
  issues        Issue[]
  expenses      Expense[]
  subscriptions Subscription[]
  complaints    Complaint[]
  guestPolicy   GuestPolicy?    @relation("UserGuestPolicy") // âœ… add this
  notices       NoticeRequest[] @relation("UserNotices") // âœ… add this
  createdAt     DateTime        @default(now())
}

model Payment {
  id        Int       @id @default(autoincrement())
  amount    Float
  date      DateTime
  month     String
  userId    Int
  guest     User      @relation(fields: [userId], references: [id])
  pgId      Int
  pg        PG        @relation(fields: [pgId], references: [id])
  status    String
  paidDate  DateTime?
  createdAt DateTime  @default(now())

  bedId Int? // âœ… ADD THIS
  bed   Bed? @relation("BedPayments", fields: [bedId], references: [id]) // âœ… ADD THIS
}

model Expense {
  id          Int       @id @default(autoincrement())
  description String
  amount      Float
  category    String
  pgId        Int
  pg          PG        @relation(fields: [pgId], references: [id])
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  date        DateTime?
  createdAt   DateTime  @default(now()) // ðŸ‘ˆ Add this
}

model Issue {
  id        Int      @id @default(autoincrement())
  message   String
  status    String
  userId    Int
  pgId      Int
  user      User     @relation(fields: [userId], references: [id])
  pg        PG       @relation(fields: [pgId], references: [id])
  createdAt DateTime @default(now())
}

model Menu {
  id        Int      @id @default(autoincrement())
  date      DateTime
  items     String // Text or JSON
  imageUrl  String? // âœ… Optional image link
  pgId      Int
  pg        PG       @relation(fields: [pgId], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  pgId      Int
  pg        PG       @relation(fields: [pgId], references: [id])
  createdAt DateTime @default(now())
}

model SubscriptionPlan {
  id            Int            @id @default(autoincrement())
  name          String // Free, Basic, Pro
  price         Float
  duration      Int // in days
  maxPGs        Int?
  maxBeds       Int?
  features      String // JSON list (optional)
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
}

model Subscription {
  id        Int              @id @default(autoincrement())
  userId    Int
  planId    Int
  user      User             @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan @relation(fields: [planId], references: [id])
  status    String // "active", "expired", "cancelled"
  startDate DateTime
  endDate   DateTime
  createdAt DateTime         @default(now())
}

model Enquiry {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  email     String
  pgName    String
  city      String
  status    String   @default("pending") // pending | approved | rejected
  createdAt DateTime @default(now())
}

model GuestPolicy {
  id          Int      @id @default(autoincrement())
  guestId     Int      @unique
  pgId        Int
  advance     Float
  maintenance Float
  createdAt   DateTime @default(now())

  guest User @relation("UserGuestPolicy", fields: [guestId], references: [id])
  pg    PG   @relation("PGGuestPolicies", fields: [pgId], references: [id])
}

model NoticeRequest {
  id         Int      @id @default(autoincrement())
  reason     String
  userId     Int
  pgId       Int
  status     String   @default("pending")
  noticeDate DateTime
  createdAt  DateTime @default(now())

  // Add the correct relation names here
  user User @relation("UserNotices", fields: [userId], references: [id])
  pg   PG   @relation("PGNotices", fields: [pgId], references: [id])
}

model Complaint {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      String   @default("pending") // "pending" | "resolved"
  createdAt   DateTime @default(now())

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  pgId Int?
  pg   PG?  @relation(fields: [pgId], references: [id])
}
